version: 2
jobs:
  build:
    working_directory: /usr/src/app
    docker:
      - image: quay.io/opentargets/mrtarget_build_base:circleci-build-base-0.1
    environment:
      CTTV_MINIMAL: True
    steps:
      - checkout
      - restore_cache:
         keys:
          # Find a cache corresponding to this specific requirements.txt checksum
          # when this file is changed, this key will fail
          - mrt-py27-b-{{ .Branch }}-{{ checksum "requirements.txt" }}
          # Find a cache corresponding to any build in this branch, regardless of package.json
          # checksum.  The most recent one will be used.
          - mrt-py27-b-{{ .Branch }}
      - run:
          name: Install requirements.txt
          command: |
            pip install -U -r requirements.txt
      - save_cache:
          key: mrt-py27-b-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "/usr/local/lib/python2.7/site-packages"
            - "/usr/local/bin"
            - "/usr/local/include/python2.7"
      - run:
          name: Dry run to check imports
          command: |
            mrtarget --dry-run citest
      - run:
          name: Run tests
          command: |
            pytest tests/
  # uncomment this to use workflows (see below)
  # push_containers:
  #   working_directory: /usr/src/app
  #   docker:
  #     - image: quay.io/opentargets/mrtarget_build_base:ep-circleci
  #   steps:
  #     - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t circle-${CIRCLE_SHA1} .
      - run:
          name: Push to GCR
          command: |
            docker login -u _json_key -p "${GCR_JSON_KEY_FILE}" https://eu.gcr.io
            if [ -n "${CIRCLE_TAG:+1}" ]; then
              ## tag tag :) and push
              echo -e "building for tag ${CIRCLE_TAG}"
              docker tag circle-${CIRCLE_SHA1} "${GCR_REPO}:${CIRCLE_TAG}"
              docker push "${GCR_REPO}:${CIRCLE_TAG}"
              docker tag ${GCR_REPO}:${CIRCLE_TAG} ${GCR_REPO}:circle-${CIRCLE_SHA1}
            elif [ -n "${CIRCLE_BRANCH:+1}" ]; then
              ## branch tag and push
              echo -e "building for branch"
              docker tag circle-${CIRCLE_SHA1} ${GCR_REPO}:${CIRCLE_BRANCH}
              docker push ${GCR_REPO}:${CIRCLE_BRANCH}
              docker tag ${GCR_REPO}:${CIRCLE_BRANCH} ${GCR_REPO}:circle-${CIRCLE_SHA1}
            else
              echo -e "### No CIRCLE_TAG or CIRCLE_BRANCH defined"
              exit 1
            fi
            ## sha commit push
            docker push ${GCR_REPO}:circle-${CIRCLE_SHA1}
            ## push latest if master
            if [ "$CIRCLE_BRANCH" = "master" ]
              then
                docker tag ${GCR_REPO}:${CIRCLE_BRANCH} ${GCR_REPO}:latest
                docker push ${GCR_REPO}:latest
            fi



  launch-hannibal:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run:
          name: Clone hannibal and spin the machine
          command: |
            GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)
            echo $GIT_COMMIT_DESC
            if [[ $GIT_COMMIT_DESC == *"[hannibal]"* ]]; then
              echo "I like when a plan comes together :cigar:"
              git clone https://github.com/opentargets/hannibal-luigi.git
              if [ -n "${CIRCLE_TAG:+1}" ]; then
                cd ~/circulate/hannibal-luigi && ~/circulate/hannibal-luigi/launch-gce.sh $CIRCLE_TAG
              elif [ -n "${CIRCLE_BRANCH:+1}" ]; then
                cd ~/circulate/hannibal-luigi && ~/circulate/hannibal-luigi/launch-gce.sh $CIRCLE_BRANCH
              else
              echo -e "## No CIRCLE_TAG or CIRCLE_BRANCH defined"
              exit 1
              fi
            else
              echo "plan aborted."
            fi


workflows:
  version: 2
  build_and_push:
    jobs:
      - build
      - launch-hannibal:
          requires:
            - build


# Ideally, we would fan these out, but we would need to persist the docker image
# we built somewhere or build it for each step. It seems that caching of docker
# images would be kept as premium feature.

# also we need to pay for > 1 container at the same time for it to actually run
# faster.



